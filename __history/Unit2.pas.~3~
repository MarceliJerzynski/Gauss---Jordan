unit Unit2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.ExtCtrls;

type
 TArray2d = array of array of Double;
  TForm2 = class(TForm)
    Button1: TButton;
    Button2: TButton;
    RBn2: TRadioButton;
    RBn3: TRadioButton;
    RBn4: TRadioButton;
    RBn5: TRadioButton;
    Label30: TLabel;
    Button3: TButton;
    ResultsGrid: TStringGrid;
    Label1: TLabel;
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure GaussJordanEliminationMethod(n : Integer; var Arr: TArray2d);
    procedure createEdits();
    procedure hideEdits();
    procedure FormCreate(Sender: TObject);
    procedure RBn5Click(Sender: TObject);
    procedure RBn4Click(Sender: TObject);
    procedure RBn3Click(Sender: TObject);
    procedure RBn2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form2: TForm2;
  Arr: TArray2d;
  n : Integer;
  distanceEEx : Integer;
  distanceELx : Integer;
  distanceELy : Integer;
  distanceEEy : Integer;
  firstLeft : Integer;
  firstTop : Integer;
  Edits : array of array of TEdit;
  Labels: array of array of TLabel;
implementation

{$R *.dfm}


procedure TForm2.FormCreate(Sender: TObject);
var
t : tgridrect;
Background: TImage;
begin
   distanceEEx := 110;
   distanceELx := 75;
   distanceELy := 2;
   distanceEEy := 50;
   firstLeft := 150;
   firstTop := 90;
   n:=5;
   createEdits();
 t.Left := -1;
  t.right := -1;
  t.Bottom := -1;
  t.top := -1;
  ResultsGrid.selection := t;

  Background := TImage.Create(self);
  Background.Parent := self;
  Background.Left := 0;
  Background.Top := 0;
  Background.Width := self.Width;
  Background.Height:= self.Height;
  Background.Picture.LoadFromFile('background.bmp');
  Background.SendToBack();


end;

procedure TForm2.hideEdits();
var
i : Integer;
j : Integer;
begin
     for i := 0 to n-1 do  //n wierszy
       begin
         for j := 0 to n do  //n+1 kolumn
          begin
            Edits[i][j].Visible := false;
          end;
       end;

      for i := 0 to n-1 do  //n wierszy
       begin
         for j := 0 to n-1 do  //n+1 kolumn
          begin
            Labels[i][j].Visible := false;
          end;
       end;

       for i := 0 to n - 1 do
         begin
           Labels[i][n-1].Caption := 'x' + IntToStr(n-1) + ' = ';
         end;

end;

procedure TForm2.GaussJordanEliminationMethod(n : Integer; var Arr: TArray2d);
var
 i : Integer;
 j : Integer;
 k : Integer;
 help : Double;
 max : Double;
 colMax : Integer;
 rowMax : Integer;
begin
    SetLength(Arr, n, n+1);

     for i := 0 to n-1 do //dla kazdego wiersza
        begin
          max := Arr[i][i];
          colMax:=i;
          rowMax:=i;

          for j := i to n-1 do
            begin
             for k := i to n-1 do
              begin
               if max < Arr[j][k] then
                begin
                  max := Arr[j][k]; //tutaj mam maxa
                  colMax:=j;
                  rowMax:=k;
                end;
              end;
            end;

          for j := i to n do  //zamiana wierszy
            begin
              help := Arr[i][j];
              Arr[i][j] := Arr[colMax][j];
              Arr[colMax][j] := help;
            end;
           for j := i to n-1 do //zamiana kolumn
            begin
              help := Arr[j][i];
              Arr[j][i] := Arr[j][rowMax];
              Arr[j][rowMax] := help;
            end;


          help := Arr[i][i];
             for j := 0 to n do
               begin
                 Arr[i][j] := Arr[i][j]/help;   //w1' = w1/w1[0] i analogicznie
               end;

             for j := 0 to n-1 do      //dla kazdego wiersza
              begin
                if i <> j then          //roznego od tego, ktorym zmieniamy
                  begin
                    help:=Arr[j][i];
                     for k := 0 to n do //dla kazdego elementu w wierszu
                      begin
                        Arr[j][k] := Arr[j][k] - Arr[i][k]*help;
                      end;

                  end;
              end;


        end;
end;


procedure TForm2.createEdits();
var
i : Integer;
j : Integer;
begin
     SetLength(Edits, n, n+1);
     SetLength(Labels, n , n);
     for i := 0 to n-1 do  //n wierszy
       begin
         for j := 0 to n do  //n+1 kolumn
          begin
            Edits[i][j] := TEdit.Create(self);
            Edits[i][j].Parent := self;
            Edits[i][j].Left := firstLeft + j*distanceEEx;
            Edits[i][j].Top := firstTop + i*distanceEEy;
            Edits[i][j].Width := 69;
            Edits[i][j].Height := 21;
            Edits[i][j].Alignment := taRightJustify;
          end;
       end;

      for i := 0 to n-1 do  //n wierszy
       begin
         for j := 0 to n-1 do  //n+1 kolumn
          begin
            Labels[i][j] := TLabel.Create(self);
            Labels[i][j].Parent := self;
            Labels[i][j].Left := firstLeft + distanceELx + j*distanceEEx;
            Labels[i][j].Top := firstTop + distanceELy + i*distanceEEy;
            Labels[i][j].Width := 69;
            Labels[i][j].Height := 21;
            Labels[i][j].Caption := 'x' + IntToStr(j) + ' + ';
          end;
       end;

       for i := 0 to n - 1 do
         begin
           Labels[i][n-1].Caption := 'x' + IntToStr(n-1) + ' = ';
         end;

end;


procedure TForm2.RBn2Click(Sender: TObject);
begin
  hideEdits();
  n:=2;
  createEdits();
end;

procedure TForm2.RBn3Click(Sender: TObject);
begin
  hideEdits();
  n:=3;
  createEdits();
end;

procedure TForm2.RBn4Click(Sender: TObject);
begin
  hideEdits();
  n:=4;
  createEdits();
end;

procedure TForm2.RBn5Click(Sender: TObject);
begin
  hideEdits();
  n:=5;
  createEdits();

end;


procedure TForm2.Button1Click(Sender: TObject);   //licz
var
  i:Integer;
  j:Integer;
begin
      SetLength(Arr, n, n+1);
      SetLength(Edits, n, n+1);

      try
       begin
        for i := 0 to n-1 do
          begin
            for j := 0 to n do
              begin
                Arr[i][j] := StrToFloat(Edits[i][j].Text);
              end;
          end;

           GaussJordanEliminationMethod(n, Arr);

           ResultsGrid.RowCount := n;
           ResultsGrid.ColCount := 2;
         for i := 0 to n-1 do
           begin
             ResultsGrid.Cells[0,i] := 'x' + IntToStr(i) + ' = ';
             ResultsGrid.Cells[1,i] := FloatToStr(Arr[i][n]);
           end;
       end;
      except
        ShowMessage('B³êdne dane');

      end;

end;

procedure TForm2.Button2Click(Sender: TObject);
var
  i: Integer;
begin
  Application.Terminate();
end;


end.
